import org.apache.sling.api.resource.Resource
import org.apache.sling.api.resource.ValueMap
import org.apache.sling.api.resource.ModifiableValueMap

// Configuration
def basePath   = "/content/dam"              // Narrow to "/content/dam/wknd" or "/content/dam/wknd-shared" if desired
def targetTitle = "request access"           // Case-insensitive match
def targetProp  = "link"
def newValue    = "https://www.google.com"
def dryRun      = false                      // Set to true to preview without saving

// Stats
def examined = 0
def matched  = 0
def updated  = 0
def alreadySet = 0
def missingProp = 0

def root = resourceResolver.getResource(basePath)
if (root == null) {
    println "Path not found: ${basePath}"
    return
}

def walk
walk = { Resource res ->
    examined++
    ValueMap vm = res.adaptTo(ValueMap)
    if (vm != null) {
        String title = vm.get("jcr:title", String)
        if (title != null && title.equalsIgnoreCase(targetTitle)) {
            matched++
            ModifiableValueMap mvm = res.adaptTo(ModifiableValueMap)
            if (mvm != null) {
                if (mvm.containsKey(targetProp)) {
                    String current = mvm.get(targetProp, String)
                    if (newValue == current) {
                        alreadySet++
                    } else {
                        if (!dryRun) {
                            mvm.put(targetProp, newValue)
                        }
                        updated++
                        println "Will update: ${res.path} -> ${targetProp}='${newValue}'"
                    }
                } else {
                    missingProp++
                    println "Missing property '${targetProp}' on ${res.path}"
                }
            }
        }
    }
    res.listChildren().each { child -> walk(child) }
}

walk(root)

if (!dryRun && resourceResolver.hasChanges()) {
    resourceResolver.commit()
}

println """
Examined: ${examined}
Matched title: ${matched}
Updated: ${updated}
Already set: ${alreadySet}
Missing '${targetProp}': ${missingProp}
Dry run: ${dryRun}
"""
